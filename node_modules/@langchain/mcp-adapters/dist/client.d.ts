import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import type { StructuredToolInterface } from "@langchain/core/tools";
/**
 * Configuration for stdio transport connection
 */
export interface StdioConnection {
    transport: "stdio";
    command: string;
    args: string[];
    env?: Record<string, string>;
    encoding?: string;
    encodingErrorHandler?: "strict" | "ignore" | "replace";
    /**
     * Additional restart settings
     */
    restart?: {
        /**
         * Whether to automatically restart the process if it exits
         */
        enabled?: boolean;
        /**
         * Maximum number of restart attempts
         */
        maxAttempts?: number;
        /**
         * Delay in milliseconds between restart attempts
         */
        delayMs?: number;
    };
}
/**
 * Configuration for SSE transport connection
 */
export interface SSEConnection {
    transport: "sse";
    url: string;
    headers?: Record<string, string>;
    useNodeEventSource?: boolean;
    /**
     * Additional reconnection settings
     */
    reconnect?: {
        /**
         * Whether to automatically reconnect if the connection is lost
         */
        enabled?: boolean;
        /**
         * Maximum number of reconnection attempts
         */
        maxAttempts?: number;
        /**
         * Delay in milliseconds between reconnection attempts
         */
        delayMs?: number;
    };
}
/**
 * Union type for all transport connection types
 */
export type Connection = StdioConnection | SSEConnection;
/**
 * MCP configuration file format
 */
export interface MCPConfig {
    servers: Record<string, Connection>;
}
/**
 * Error class for MCP client operations
 */
export declare class MCPClientError extends Error {
    readonly serverName?: string | undefined;
    constructor(message: string, serverName?: string | undefined);
}
/**
 * Client for connecting to multiple MCP servers and loading LangChain-compatible tools.
 */
export declare class MultiServerMCPClient {
    private clients;
    private serverNameToTools;
    private connections?;
    private cleanupFunctions;
    private transportInstances;
    /**
     * Create a new MultiServerMCPClient.
     *
     * @param connections - Optional connections to initialize
     */
    constructor(connections?: Record<string, Connection>);
    /**
     * Try to load the default configuration file (mcp.json) from the root directory
     */
    private static tryLoadDefaultConfig;
    /**
     * Load a configuration from a file
     *
     * @param configPath - Path to the configuration file
     * @returns The parsed configuration
     */
    private static loadConfigFromFile;
    /**
     * Process environment variables in configuration
     * Replaces ${ENV_VAR} with the actual environment variable value
     *
     * @param servers - The servers configuration object
     */
    private static processEnvVarsInConfig;
    /**
     * Process environment variables recursively in an object
     *
     * @param obj - The object to process
     */
    private static processEnvVarsRecursively;
    /**
     * Process connection configurations
     *
     * @param connections - Raw connection configurations
     * @returns Processed connection configurations
     */
    private static processConnections;
    /**
     * Check if a configuration is for a stdio connection
     */
    private static isStdioConnection;
    /**
     * Check if a configuration is for an SSE connection
     */
    private static isSSEConnection;
    /**
     * Process stdio connection configuration
     */
    private static processStdioConfig;
    /**
     * Process SSE connection configuration
     */
    private static processSSEConfig;
    /**
     * Load a configuration from a JSON file.
     *
     * @param configPath - Path to the configuration file
     * @returns A new MultiServerMCPClient
     * @throws {MCPClientError} If the configuration file cannot be loaded or parsed
     */
    static fromConfigFile(configPath: string): MultiServerMCPClient;
    /**
     * Initialize connections to all servers.
     *
     * @returns A map of server names to arrays of tools
     * @throws {MCPClientError} If initialization fails
     */
    initializeConnections(): Promise<Map<string, StructuredToolInterface[]>>;
    /**
     * Initialize a stdio connection
     */
    private initializeStdioConnection;
    /**
     * Set up stdio restart handling
     */
    private setupStdioRestart;
    /**
     * Initialize an SSE connection
     */
    private initializeSSEConnection;
    /**
     * Create an SSE transport with appropriate EventSource implementation
     */
    private createSSETransport;
    /**
     * Create an EventSource transport for Node.js environments
     */
    private createNodeEventSourceTransport;
    /**
     * Set up SSE reconnect handling
     */
    private setupSSEReconnect;
    /**
     * Load tools for a specific server
     */
    private loadToolsForServer;
    /**
     * Attempt to reconnect to a server after a connection failure.
     *
     * @param serverName - The name of the server to reconnect to
     * @param connection - The connection configuration
     * @param maxAttempts - Maximum number of reconnection attempts
     * @param delayMs - Delay in milliseconds between reconnection attempts
     * @private
     */
    private attemptReconnect;
    /**
     * Clean up resources for a specific server
     */
    private cleanupServerResources;
    /**
     * Get tools from specified servers as a flattened array.
     *
     * @param servers - Optional array of server names to filter tools by.
     *                 If not provided, returns tools from all servers.
     * @returns A flattened array of tools from the specified servers (or all servers)
     */
    getTools(servers?: string[]): StructuredToolInterface[];
    /**
     * Get all tools from all servers as a flat array.
     *
     * @returns A flattened array of all tools
     */
    private getAllToolsAsFlatArray;
    /**
     * Get tools from specific servers as a flat array.
     *
     * @param serverNames - Names of servers to get tools from
     * @returns A flattened array of tools from the specified servers
     */
    private getToolsFromServers;
    /**
     * Get a client for a specific server.
     *
     * @param serverName - The name of the server
     * @returns The client for the server, or undefined if the server is not connected
     */
    getClient(serverName: string): Client | undefined;
    /**
     * Close all connections.
     */
    close(): Promise<void>;
    /**
     * Connect to an MCP server via stdio transport.
     *
     * @param serverName - A name to identify this server
     * @param command - The command to run
     * @param args - Arguments for the command
     * @param env - Optional environment variables
     * @param restart - Optional restart configuration
     * @returns A map of server names to arrays of tools
     */
    connectToServerViaStdio(serverName: string, command: string, args: string[], env?: Record<string, string>, restart?: StdioConnection["restart"]): Promise<Map<string, StructuredToolInterface[]>>;
    /**
     * Connect to an MCP server via SSE transport.
     *
     * @param serverName - A name to identify this server
     * @param url - The URL of the SSE server
     * @param headers - Optional headers to include in the requests
     * @param useNodeEventSource - Whether to use Node.js EventSource (requires eventsource package)
     * @param reconnect - Optional reconnection configuration
     * @returns A map of server names to arrays of tools
     */
    connectToServerViaSSE(serverName: string, url: string, headers?: Record<string, string>, useNodeEventSource?: boolean, reconnect?: SSEConnection["reconnect"]): Promise<Map<string, StructuredToolInterface[]>>;
    /**
     * Add configuration from a JSON file to the existing configuration.
     *
     * @param configPath - Path to the configuration file
     * @returns This client instance for method chaining
     * @throws {MCPClientError} If the configuration file cannot be loaded or parsed
     */
    addConfigFromFile(configPath: string): MultiServerMCPClient;
    /**
     * Add server configurations directly to the existing configuration.
     *
     * @param connections - Server connections to add
     * @returns This client instance for method chaining
     */
    addConnections(connections: Record<string, Connection>): MultiServerMCPClient;
    /**
     * Get the server name for a specific tool.
     *
     * @param toolName - The name of the tool
     * @returns The server name or undefined if the tool is not found
     */
    getServerForTool(toolName: string): string | undefined;
}
